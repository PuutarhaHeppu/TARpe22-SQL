-- kommentaar
-- teeme andmebaasi e db
create database TARpe22

-- db kustutamine
drop database TARpe22

-- tabeli loomine
create table Gender
(
id int not null primary key,
Gender nvarchar(10) not null
)

-- andmete sisestamine
insert into Gender (Id, Gender)
values (2, 'Male')
insert into Gender (Id, Gender)
values (1, 'Female')
insert into Gender (Id, Gender)
values (3, 'Unknown')

-- sama Id väärtusega rida ei saa sisestada
select * from Gender

-- teeme uue tabeli
create table Person
(
Id int not null primary key,
name nvarchar(30),
Email nvarchar(30),
GenderId int
)

-- vaatame Person tabeli sisu
select * from Person

-- andmete sisestamine
insert into Person (Id, Name, Email, genderID)
values (1, 'Superman', 's@s.com', 2)
insert into Person (Id, Name, Email, genderID)
values (2, 'Wonderwoman', 's@s.com', 1)
insert into Person (Id, Name, Email, genderID)
values (3, 'ant', 'a@a.com', 3)
insert into Person (Id, Name, Email, genderID)
values (4, 'Batman', 'b@b.com', 2)
insert into Person (Id, Name, Email, genderID)
values (5, 'aquaman', 'a@a.com', 2)
insert into Person (Id, Name, Email, genderID)
values (6, 'Catwoman', 'c@c.com', 1)
insert into Person (Id, Name, Email, genderID)
values (8, NULL, NULL, 2)

select * from Person

-- vöörvõtme ühenduse loomine kahe tabeli vahel
alter table Person add constraint tblPerson_GenderId_Fk
foreign key (GenderId) references gender(Id)

-- kui sisestad uue rea andmeid ja ei ole sisestanud GenderId all väärtust
-- see automaatselt sisestab tabelisse väärtuse 3 selleks on unknown
alter table Person
add constraint DF_Persons_GenderId
default 3 for GenderId

insert into Person (Id, Name, Email)
values (9, 'Ironman', 'i@i.com')

select * from Person

--piirangu maha võtmine
alter table Person
drop constraint DF_Persons_GenderId

-- lisame uue veeru
alter table Person
add Age nvarchar(10)

--lisame vanuse piirangu sisestamisel
--ei saa lisada suuremat väärtus kui 801
alter table Person
add constraint CK_Person_Age check (Age > 0 and Age < 801)

-- rea kustutamine
-- kui paned vale id, siis ei muuda midagi
delete from Person where Id = 9

select * from Person

--kuidas uuendada andmeid tabelis
update Person
set Age = 50
where Id = 1

--lisame juurde uue veeru
alter table Person
add City nvarchar(50)

-- kõik, kes elavad Gothami linnas
select * from person Where City = 'Gotham'
-- kõik, kes ei ela Gothami linnas
select * from Person Where City != 'Gotham'
-- teine variant
select * from Person Where not City = 'Gotham'
-- kolmas variant
select * from Person where City <> 'Gotham'

--näitab teatud vanusega inimesi
select * from Person where Age = 800 or Age = 35 or Age = 27
select * from Person where Age in (800, 35, 27)

--näitab teatud vanusevahemikus olevaidinimesi
select * from Person where Age between 20 and 35

--wildcard ehk näitab kõik g-tähega linnad
select * from Person where City like 'g%'
--n'itab, kõik emaimil, milles on @ märk
select * from Person where Email like '%@%'

-- näiab kõiki, kellel ei ole @-märki emailis
select * from Person where Email not like '%@%'

--näitab, kellel on emailis ess ja peale @-märki
-- ainult üks täht
select * from person where Email like '_@_.com'

-- kõik, kellel ei ole nimes t'ht W, A, C
select * from person where Name like '[^WAC]%'

--kes elavad Gothamis ja New Yorkis
select * from Person where (City = 'Gotham' or City = 'New York')

 --kõik , kes elavad Gothamis ja New Yorkis ning alla 30 eluaastat
 select * from Person where
 (City = 'Gotham' or City = 'new York')
 and Age >= 30

 -- kuvab tähestikulises järjekorras inimesi ja võtab auseks nime
 select * from Person order by name
 -- kuvab vastupidises järjekorras
 select * from Person order by Name desc

 --võtab kolm esimest rida
 select top 3 * from Person

 --- muudab Age muutuja int-ks ja näitab vanuselises järjestuses
 select * from Person order by CAST(Age as int)

 --- kõikide isikute koondvanus
 select SUM(CAST(Age as int)) from Person

 --- näitab, kõige noormat isikut
 select MIN(CAST(Age as int)) from Person

 --- näeme konkreetsetes linnades isikute koondvanust
 --- enne oli Age string, aga päringu ajal muutsime selle int-ks
 select City, SUM(CAST(AGE as int)) as totalage from Person group by City

 --- kuidas daab kodiga muuta tabeli andmetüüpi ja selle pikkust
alter table Person
alter column Name nvarchar(25)

alter table Person
alter column Age int

--- kuvab esimeses reas välja toodud järjestuses ja muudab Age-i TotalAge-ks
--- teeb järjestuse vaatesse: City, GenderId ja järjestab omakorda City veeru järgi
select City, GenderId, SUM(Age) as TotalAge from Person
group by City, GenderId order by City

--- näitab, et mitu rida on selles tabelis
select COUNT(*) from Person
select * from Person

--- veergude lugemine
select count(*)
from information_schema.columns
where table_name = 'Person'

--- näitab tulemust, et mitu inimest on GenderId väärtusega 2 konkreetses linnas
--- avutab kokku vanuse
select GenderId, City, SUM(Age) as TotalAge, COUNT(Id) as [Total Person(s)]
from Person 
where genderId = '2'
group by GenderId, City

--- 
select GenderId, City, SUM(Age) as TotalAge, COUNT(Id) as [Total Person(s)]
from Person 
group by GenderId, City having SUM(Age) > 41

--- loome uue tabelid
create table Department
(
Id int primary key,
DepartmentName nvarchar(50),
[Location] nvarchar(50),
DepartmentHead nvarchar(50)
)
insert into Department (Id, DepartmentName, [Location], Departmenthead)
values (1, 'IT', 'London', 'Rick')
insert into Department (Id, DepartmentName, [Location], Departmenthead)
values (2, 'Payroll', 'Delhi', 'Ron')
insert into Department (Id, DepartmentName, [Location], Departmenthead)
values (3, 'HR', 'New York', 'Christie')
insert into Department (Id, DepartmentName, [Location], Departmenthead)
values (4, 'Other Department', 'Sydney', 'Cindrella')

create table Employees
(
Id int primary key,
Name nvarchar(50),
Gender nvarchar(50),
Salary nvarchar(50),
DepartmentId int
)
insert into Employees (Id, Name, Gender, Salary, DepartmentId)
values (1, 'Name', 'Gender', 'Salary', 'DepartmentId')
insert into Employees (Id, Name, Gender, Salary, DepartmentId)
values (1, 'Tom', 'Male', '4000', 'IT')
insert into Employees (Id, Name, Gender, Salary, DepartmentId)
values (1, 'Pam', 'Female', '3000', 'HR')
insert into Employees (Id, Name, Gender, Salary, DepartmentId)
values (1, 'John', 'Male', '3500', 'IT')
insert into Employees (Id, Name, Gender, Salary, DepartmentId)
values (1, 'Sam', 'Male', '4500', 'Payroll')
insert into Employees (Id, Name, Gender, Salary, DepartmentId)
values (1, 'Todd', 'Male', '2800', 'Payroll')
insert into Employees (Id, Name, Gender, Salary, DepartmentId)
values (1, 'Ben', 'Male', '7000', 'IT')
insert into Employees (Id, Name, Gender, Salary, DepartmentId)
values (1, 'Sara', 'Female', '4800', 'HR')
insert into Employees (Id, Name, Gender, Salary, DepartmentId)
values (1, 'Valarie', 'Female', '5500', 'IT')
insert into Employees (Id, Name, Gender, Salary, DepartmentId)
values (1, '´James', 'Male', '6500', NULL)
insert into Employees (Id, Name, Gender, Salary, DepartmentId)
values (1, 'Russell', 'Male', '8800', NULL)
